// <auto-generated />
using System;
using LoanSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoanSystem.Data.Migrations
{
    [DbContext(typeof(LoanSystemContext))]
    [Migration("20230615160507_AddFirstNameAndLastNameColumnInUserTable")]
    partial class AddFirstNameAndLastNameColumnInUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LoanSystem.Models.Domain.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("InterestRate")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TermInMonths")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Loan");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 2000m,
                            InterestRate = 3.7000000000000002,
                            Name = "Personal Loan",
                            TermInMonths = 2,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 4000m,
                            InterestRate = 6.9000000000000004,
                            Name = "Personal Loan",
                            TermInMonths = 4,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 6000m,
                            InterestRate = 15.4,
                            Name = "Personal Loan",
                            TermInMonths = 12,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 8000m,
                            InterestRate = 18.899999999999999,
                            Name = "Personal Loan",
                            TermInMonths = 24,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 390000m,
                            InterestRate = 7.7000000000000002,
                            Name = "Business Loan",
                            TermInMonths = 48,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 270000m,
                            InterestRate = 36.899999999999999,
                            Name = "Business Loan",
                            TermInMonths = 392,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 7,
                            Amount = 450000m,
                            InterestRate = 15.4,
                            Name = "Business Loan",
                            TermInMonths = 86,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 8,
                            Amount = 1013000m,
                            InterestRate = 18.899999999999999,
                            Name = "Business Loan",
                            TermInMonths = 196,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 9,
                            Amount = 3000m,
                            InterestRate = 4.7000000000000002,
                            Name = "Online Cash Loan",
                            TermInMonths = 24,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 10,
                            Amount = 2800m,
                            InterestRate = 2.7999999999999998,
                            Name = "Online Cash Loan",
                            TermInMonths = 1,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 11,
                            Amount = 1700m,
                            InterestRate = 3.7999999999999998,
                            Name = "Online Cash Loan",
                            TermInMonths = 2,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 12,
                            Amount = 2200m,
                            InterestRate = 5.9000000000000004,
                            Name = "Online Cash Loan",
                            TermInMonths = 6,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 13,
                            Amount = 900m,
                            InterestRate = 3.0,
                            Name = "Cash Advance",
                            TermInMonths = 1,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 14,
                            Amount = 700m,
                            InterestRate = 3.1000000000000001,
                            Name = "Cash Advance",
                            TermInMonths = 3,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 15,
                            Amount = 500m,
                            InterestRate = 3.1000000000000001,
                            Name = "Cash Advance",
                            TermInMonths = 3,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        },
                        new
                        {
                            Id = 16,
                            Amount = 300m,
                            InterestRate = 3.0,
                            Name = "Cash Advance",
                            TermInMonths = 1,
                            UserId = "3eb97628-c518-4b41-845e-9f3f68ac51c9"
                        });
                });

            modelBuilder.Entity("LoanSystem.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LoanSystem.Models.Domain.Loan", b =>
                {
                    b.HasOne("LoanSystem.Models.Domain.User", "User")
                        .WithMany("Loans")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LoanSystem.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LoanSystem.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoanSystem.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LoanSystem.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoanSystem.Models.Domain.User", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
